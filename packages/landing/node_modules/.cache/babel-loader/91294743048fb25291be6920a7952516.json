{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/uday1/superpropslanding/superpropslanding/SuperProps/node_modules/common/src/components/ScrollSpyMenu/index.js\";\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollspy from 'react-scrollspy';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport Link from 'next/link';\nimport { DrawerContext } from '../../contexts/DrawerContext';\n\nvar ScrollSpyMenu = function ScrollSpyMenu(_ref) {\n  var className = _ref.className,\n      menuItems = _ref.menuItems,\n      drawerClose = _ref.drawerClose,\n      props = _objectWithoutProperties(_ref, [\"className\", \"menuItems\", \"drawerClose\"]);\n\n  var _useContext = useContext(DrawerContext),\n      dispatch = _useContext.dispatch; // empty array for scrollspy items\n\n\n  var scrollItems = []; // convert menu path to scrollspy items\n\n  menuItems.forEach(function (item) {\n    scrollItems.push(item.path.slice(1));\n  }); // Add all classs to an array\n\n  var addAllClasses = ['scrollspy__menu']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Close drawer when click on menu item\n\n\n  var toggleDrawer = function toggleDrawer() {\n    dispatch({\n      type: 'TOGGLE'\n    });\n  };\n\n  return React.createElement(Scrollspy, _extends({\n    items: scrollItems,\n    className: addAllClasses.join(' '),\n    drawerClose: drawerClose\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), menuItems.map(function (menu, index) {\n    return React.createElement(\"li\", {\n      key: \"menu-item-\".concat(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, menu.staticLink ? React.createElement(Link, {\n      href: menu.path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, menu.label)) : React.createElement(React.Fragment, null, drawerClose ? React.createElement(AnchorLink, {\n      href: menu.path,\n      offset: menu.offset,\n      onClick: toggleDrawer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, menu.label) : React.createElement(AnchorLink, {\n      href: menu.path,\n      offset: menu.offset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, menu.label)));\n  }));\n};\n\nScrollSpyMenu.propTypes = {\n  /** className of the ScrollSpyMenu. */\n  className: PropTypes.string,\n\n  /** menuItems is an array of object prop which contain your menu\n   * data.\n   */\n  menuItems: PropTypes.array.isRequired,\n\n  /** Class name that apply to the navigation element paired with the content element in viewport. */\n  currentClassName: PropTypes.string,\n\n  /** Class name that apply to the navigation elements that have been scrolled past [optional]. */\n  scrolledPastClassName: PropTypes.string,\n\n  /** HTML tag for Scrollspy component if you want to use other than <ul/> [optional]. */\n  componentTag: PropTypes.string,\n\n  /** Style attribute to be passed to the generated <ul/> element [optional]. */\n  style: PropTypes.object,\n\n  /** Offset value that adjusts to determine the elements are in the viewport [optional]. */\n  offset: PropTypes.number,\n\n  /** Name of the element of scrollable container that can be used with querySelector [optional]. */\n  rootEl: PropTypes.string,\n\n  /**\n   * Function to be executed when the active item has been updated [optional].\n   */\n  onUpdate: PropTypes.func\n};\nScrollSpyMenu.defaultProps = {\n  componentTag: 'ul',\n  currentClassName: 'is-current'\n};\nexport default ScrollSpyMenu;","map":{"version":3,"sources":["/home/uday1/superpropslanding/superpropslanding/SuperProps/node_modules/common/src/components/ScrollSpyMenu/index.js"],"names":["React","useContext","PropTypes","Scrollspy","AnchorLink","Link","DrawerContext","ScrollSpyMenu","className","menuItems","drawerClose","props","dispatch","scrollItems","forEach","item","push","path","slice","addAllClasses","toggleDrawer","type","join","map","menu","index","staticLink","label","offset","propTypes","string","array","isRequired","currentClassName","scrolledPastClassName","componentTag","style","object","number","rootEl","onUpdate","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollspy from 'react-scrollspy';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport Link from 'next/link';\n\nimport { DrawerContext } from '../../contexts/DrawerContext';\n\nconst ScrollSpyMenu = ({ className, menuItems, drawerClose, ...props }) => {\n  const { dispatch } = useContext(DrawerContext);\n  // empty array for scrollspy items\n  const scrollItems = [];\n\n  // convert menu path to scrollspy items\n  menuItems.forEach(item => {\n    scrollItems.push(item.path.slice(1));\n  });\n\n  // Add all classs to an array\n  const addAllClasses = ['scrollspy__menu'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // Close drawer when click on menu item\n  const toggleDrawer = () => {\n    dispatch({\n      type: 'TOGGLE',\n    });\n  };\n\n  return (\n    <Scrollspy\n      items={scrollItems}\n      className={addAllClasses.join(' ')}\n      drawerClose={drawerClose}\n      {...props}\n    >\n      {menuItems.map((menu, index) => (\n        <li key={`menu-item-${index}`}>\n          {menu.staticLink ? (\n            <Link href={menu.path}>\n              <a>{menu.label}</a>\n            </Link>\n          ) : (\n            <>\n              {drawerClose ? (\n                <AnchorLink\n                  href={menu.path}\n                  offset={menu.offset}\n                  onClick={toggleDrawer}\n                >\n                  {menu.label}\n                </AnchorLink>\n              ) : (\n                <AnchorLink href={menu.path} offset={menu.offset}>\n                  {menu.label}\n                </AnchorLink>\n              )}\n            </>\n          )}\n        </li>\n      ))}\n    </Scrollspy>\n  );\n};\n\nScrollSpyMenu.propTypes = {\n  /** className of the ScrollSpyMenu. */\n  className: PropTypes.string,\n\n  /** menuItems is an array of object prop which contain your menu\n   * data.\n   */\n  menuItems: PropTypes.array.isRequired,\n\n  /** Class name that apply to the navigation element paired with the content element in viewport. */\n  currentClassName: PropTypes.string,\n\n  /** Class name that apply to the navigation elements that have been scrolled past [optional]. */\n  scrolledPastClassName: PropTypes.string,\n\n  /** HTML tag for Scrollspy component if you want to use other than <ul/> [optional]. */\n  componentTag: PropTypes.string,\n\n  /** Style attribute to be passed to the generated <ul/> element [optional]. */\n  style: PropTypes.object,\n\n  /** Offset value that adjusts to determine the elements are in the viewport [optional]. */\n  offset: PropTypes.number,\n\n  /** Name of the element of scrollable container that can be used with querySelector [optional]. */\n  rootEl: PropTypes.string,\n\n  /**\n   * Function to be executed when the active item has been updated [optional].\n   */\n  onUpdate: PropTypes.func,\n};\n\nScrollSpyMenu.defaultProps = {\n  componentTag: 'ul',\n  currentClassName: 'is-current',\n};\n\nexport default ScrollSpyMenu;\n"]},"metadata":{},"sourceType":"module"}