{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/uday1/superpropslanding/superpropslanding/SuperProps/node_modules/reusecore/src/elements/Drawer/index.js\";\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport RcDrawer from 'rc-drawer';\nimport 'rc-drawer/assets/index.css';\n\nvar Drawer = function Drawer(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      closeButton = _ref.closeButton,\n      closeButtonStyle = _ref.closeButtonStyle,\n      drawerHandler = _ref.drawerHandler,\n      toggleHandler = _ref.toggleHandler,\n      open = _ref.open,\n      props = _objectWithoutProperties(_ref, [\"className\", \"children\", \"closeButton\", \"closeButtonStyle\", \"drawerHandler\", \"toggleHandler\", \"open\"]);\n\n  // Add all classs to an array\n  var addAllClasses = ['reusecore__drawer']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(RcDrawer, _extends({\n    open: open,\n    onMaskClick: toggleHandler,\n    className: addAllClasses.join(' ')\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"reusecore-drawer__close\",\n    onClick: toggleHandler,\n    style: closeButtonStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, closeButton), children), React.createElement(\"div\", {\n    className: \"reusecore-drawer__handler\",\n    style: {\n      display: 'inline-block'\n    },\n    onClick: toggleHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, drawerHandler));\n};\n\nDrawer.propTypes = {\n  /** ClassName of the Drawer */\n  className: PropTypes.string,\n\n  /** Used to render icon, button, text or any elements inside the closeButton prop. */\n  closeButton: PropTypes.element,\n\n  /** Set drawer width. Default value is 300px. */\n  width: PropTypes.string,\n\n  /** Set drawer position left || right || top || bottom. */\n  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n\n  /** drawerHandler could be button, icon, string or any component */\n  drawerHandler: PropTypes.element.isRequired\n};\nDrawer.defaultProps = {\n  width: '300px',\n  handler: false,\n  level: null\n};\nexport default Drawer;","map":{"version":3,"sources":["/home/uday1/superpropslanding/superpropslanding/SuperProps/node_modules/reusecore/src/elements/Drawer/index.js"],"names":["React","Fragment","PropTypes","RcDrawer","Drawer","className","children","closeButton","closeButtonStyle","drawerHandler","toggleHandler","open","props","addAllClasses","push","join","display","propTypes","string","element","width","placement","oneOf","isRequired","defaultProps","handler","level"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,4BAAP;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAUT;AAAA,MATJC,SASI,QATJA,SASI;AAAA,MARJC,QAQI,QARJA,QAQI;AAAA,MAPJC,WAOI,QAPJA,WAOI;AAAA,MANJC,gBAMI,QANJA,gBAMI;AAAA,MALJC,aAKI,QALJA,aAKI;AAAA,MAJJC,aAII,QAJJA,aAII;AAAA,MAHJC,IAGI,QAHJA,IAGI;AAAA,MADDC,KACC;;AACJ;AACA,MAAMC,aAAa,GAAG,CAAC,mBAAD,CAAtB,CAFI,CAIJ;;AACA,MAAIR,SAAJ,EAAe;AACbQ,IAAAA,aAAa,CAACC,IAAd,CAAmBT,SAAnB;AACD;;AAED,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEM,IADR;AAEE,IAAA,WAAW,EAAED,aAFf;AAGE,IAAA,SAAS,EAAEG,aAAa,CAACE,IAAd,CAAmB,GAAnB;AAHb,KAIMH,KAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAME;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAyC,IAAA,OAAO,EAAEF,aAAlD;AAAiE,IAAA,KAAK,EAAEF,gBAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,WADH,CANF,EASGD,QATH,CADF,EAYE;AACE,IAAA,SAAS,EAAC,2BADZ;AAEE,IAAA,KAAK,EAAE;AAAEU,MAAAA,OAAO,EAAE;AAAX,KAFT;AAGE,IAAA,OAAO,EAAEN,aAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGD,aALH,CAZF,CADF;AAsBD,CAzCD;;AA2CAL,MAAM,CAACa,SAAP,GAAmB;AACjB;AACAZ,EAAAA,SAAS,EAAEH,SAAS,CAACgB,MAFJ;;AAIjB;AACAX,EAAAA,WAAW,EAAEL,SAAS,CAACiB,OALN;;AAOjB;AACAC,EAAAA,KAAK,EAAElB,SAAS,CAACgB,MARA;;AAUjB;AACAG,EAAAA,SAAS,EAAEnB,SAAS,CAACoB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,KAAlB,EAAyB,QAAzB,CAAhB,CAXM;;AAajB;AACAb,EAAAA,aAAa,EAAEP,SAAS,CAACiB,OAAV,CAAkBI;AAdhB,CAAnB;AAiBAnB,MAAM,CAACoB,YAAP,GAAsB;AACpBJ,EAAAA,KAAK,EAAE,OADa;AAEpBK,EAAAA,OAAO,EAAE,KAFW;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAAtB;AAMA,eAAetB,MAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport RcDrawer from 'rc-drawer';\nimport 'rc-drawer/assets/index.css';\n\nconst Drawer = ({\n  className,\n  children,\n  closeButton,\n  closeButtonStyle,\n  drawerHandler,\n  toggleHandler,\n  open,\n\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__drawer'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return (\n    <Fragment>\n      <RcDrawer\n        open={open}\n        onMaskClick={toggleHandler}\n        className={addAllClasses.join(' ')}\n        {...props}\n      >\n        <div className=\"reusecore-drawer__close\" onClick={toggleHandler} style={closeButtonStyle}>\n          {closeButton}\n        </div>\n        {children}\n      </RcDrawer>\n      <div\n        className=\"reusecore-drawer__handler\"\n        style={{ display: 'inline-block' }}\n        onClick={toggleHandler}\n      >\n        {drawerHandler}\n      </div>\n    </Fragment>\n  );\n};\n\nDrawer.propTypes = {\n  /** ClassName of the Drawer */\n  className: PropTypes.string,\n\n  /** Used to render icon, button, text or any elements inside the closeButton prop. */\n  closeButton: PropTypes.element,\n\n  /** Set drawer width. Default value is 300px. */\n  width: PropTypes.string,\n\n  /** Set drawer position left || right || top || bottom. */\n  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n\n  /** drawerHandler could be button, icon, string or any component */\n  drawerHandler: PropTypes.element.isRequired\n};\n\nDrawer.defaultProps = {\n  width: '300px',\n  handler: false,\n  level: null\n};\n\nexport default Drawer;\n"]},"metadata":{},"sourceType":"module"}